buildscript {
    repositories {
        jcenter()
        maven { url "http://repo.spring.io/snapshot" }
        maven { url "http://repo.spring.io/milestone" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.5.RELEASE")
        classpath("com.bertramlabs.plugins:asset-pipeline-gradle:2.9.1")
        classpath("com.bertramlabs.plugins:handlebars-asset-pipeline:2.6.7")
        classpath("com.eriwen:gradle-js-plugin:2.12.0")
        classpath("commons-codec:commons-codec:1.8")
    }
}

apply plugin: 'java'
apply plugin: 'spring-boot'
apply plugin: 'com.bertramlabs.asset-pipeline'
apply plugin: "com.eriwen.gradle.js"

version = "1.0"

jar {
    baseName = 'seecret-app'
}

repositories {
    jcenter()
    maven { url "http://repo.spring.io/snapshot" }
    maven { url "http://repo.spring.io/milestone" }
}

dependencies {
	compile("org.springframework.boot:spring-boot-devtools")
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-thymeleaf")
    
}

task wrapper (type: Wrapper) {
    gradleVersion = '2.13'
}

/* Local development configuration */

sourceSets {
    dev {
        resources.srcDir file("src/assets")
    }
}

bootRun {
    systemProperties = System.properties
    main = "net.seecret.Application"
}

/* combineJs compiles all handlebars templates and other javascript into single production js file */

javascript.source {
    dev {
        js {
            srcDir "${buildDir}/assets"
            include "*.js"
        }
    }
}

task "checksumPublicWebContent" { 
	def path = "src/main/resources/public/"
 	def hashes = new StringBuilder()

    def sourceTree = fileTree(dir: path , includes: ["**/*.html", "**/*.js", "**/*.css"])
	sourceTree.each {File file ->
	  String sha1checksum;
	  file.withInputStream { ins -> sha1checksum =  org.apache.commons.codec.digest.DigestUtils.sha1Hex(ins) }
	  def webPath = relativePath(file).substring(path.size()).replaceAll("\\\\", "/")
	  hashes.append("SHA1(").append(webPath).append(")= ").append(sha1checksum).append("\n")
	}
	File hashesFile = file( new File("src/main/resources/public/hashes.txt"))
	hashesFile.setText(hashes.toString())
}
checksumPublicWebContent.shouldRunAfter combineJs

task "sriPublicWebContent" { 
	def path = "src/main/resources/public/"
 
 	def subresourceIntegrity = new StringBuilder()
    def sourceTree = fileTree(dir: path , includes: ["**/*.js"])
	sourceTree.each {File file ->
	  String sha384integrity;
	  file.withInputStream { ins -> sha384integrity =  org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(org.apache.commons.codec.digest.DigestUtils.sha384(ins)) }
	  def webPath = relativePath(file).substring(path.size()).replaceAll("\\\\", "/")
	  subresourceIntegrity.append("<script type=\"text/javascript\" src=\"").append(webPath).append("\" integrity=\"sha384-").append(sha384integrity).append("\"></script>").append("\n")
	}
	
    sourceTree = fileTree(dir: path , includes: ["**/*.css"])
	sourceTree.each {File file ->
	  String sha384integrity;
	  file.withInputStream { ins -> sha384integrity =  org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(org.apache.commons.codec.digest.DigestUtils.sha384(ins)) }
	  def webPath = relativePath(file).substring(path.size()).replaceAll("\\\\", "/")
	  subresourceIntegrity.append("<link rel=\"stylesheet\" href=\"").append(webPath).append("\" integrity=\"sha384-").append(sha384integrity).append("\"/>").append("\n")
	}

	File subresourceIntegrityFile = file( new File("src/main/resources/public/subresource_integrity.txt"))
	subresourceIntegrityFile.setText(subresourceIntegrity.toString())
}
sriPublicWebContent.shouldRunAfter combineJs

processResources {
  dependsOn combineJs
}

jar {
  dependsOn checksumPublicWebContent
}

combineJs {
    dependsOn assetCompile
    source = javascript.source.dev.js.files
    dest = file("src/main/resources/public/js/seecret_app-${version}.min.js")
}

assets {
	minifyJs = true
  	enableSourceMaps = false
    enableDigests = false
    skipNonDigests = false
    enableGzip = false
    configOptions  = [
        handlebars: [
            templateRoot: 'templates',
            templatePathSeperator: '/'
        ]
    ]
}


